# Create a Docker build for a production release
name: build-prod-release

on:
  # Manually triggered, user must supply tag
  workflow_dispatch:
    inputs:
      api-buildtag:
        description: 'AuScope-Portal-API build tag: (format: vX.Y.Z)'
        required: true
      pc-buildtag:
        description: 'portal-core build tag: (format: vX.Y.Z)'
        required: true
env:
  IMAGE_NAME: auscope-portal-api-prod-release  

jobs:
  # Push image to GitHub Packages.
  push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.api-buildtag }}
      - name: Set up JDK 1.17
        uses: actions/setup-java@v1
        with:
          java-version: 1.17
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Checkout portal-core
        uses: actions/checkout@v2.3.4
        with:
          repository: AuScope/portal-core
          ref: ${{ github.event.inputs.pc-buildtag }}
          path: portal-core
      - name: Build portal-core 
        run: |
          cd portal-core
          mvn clean install
      - name: Build with Maven, then with docker 
        run: |
          mvn -B package --file pom.xml
          ls -lR target
          WAR_VERSION=$(echo "${{ github.event.inputs.api-buildtag }}" | sed 's/v//')
          echo WAR_VERSION=$WAR_VERSION
          docker build . --file Dockerfile.github --tag $IMAGE_NAME --build-arg war_file=target/auscope-portal-api-$WAR_VERSION.war
          
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      
      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Always the latest version
          VERSION=latest
          echo "Build Tag: ${{ github.event.inputs.buildtag }}"
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          
